{
  "problem_id": "two-sum",
  "name": "Two Sum",
  "number": 1,
  "description": "Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to target.",
  "snippets": [
    {
      "snippet_id": "two-sum-java",
      "language": "java",
      "snippet": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}",
      "call": "toString(new Solution().twoSum(asIntArray(args[1]), asInt(args[2])))",
      "problem_id": "two-sum"
    }
  ],
  "inputs": [
    {
      "case_id": "two-sum-1",
      "input": "[2,7,11,15]\n9",
      "problem_id": "two-sum"
    },
    {
      "case_id": "two-sum-2",
      "input": "[3,2,4]\n6",
      "problem_id": "two-sum"
    },
    {
      "case_id": "two-sum-3",
      "input": "[2,7,11,15]\n9",
      "problem_id": "two-sum"
    }
  ],
  "solution": {
    "solution_id": "two-sum-java",
    "language": "java",
    "snippet": "class Solution { public int[] twoSum(int[] nums, int target) { Map<Integer, Integer> map = new HashMap<>(); for (int i = 0; i < nums.length; i++) { int complement = target - nums[i]; if (map.containsKey(complement)) { return new int[]{map.get(complement), i}; } map.put(nums[i], i); } throw new IllegalArgumentException(\"No two sum solution\"); } }\n",
    "problem_id": "two-sum"
  }
}
